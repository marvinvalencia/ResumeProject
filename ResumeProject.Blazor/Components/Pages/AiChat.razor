@using System.Text.Json.Nodes
@using ResumeProject.Blazor.Services.GroqApiLibrary
@using Microsoft.AspNetCore.Hosting
@inject GroqApiClient GroqAI
@inject IWebHostEnvironment Env

<button class="ai-chat__toggle" @onclick="ToggleChat" aria-label="Open chat">
    💬 Chat
</button>

@if (ShowChat)
{
    <section class="ai-chat__panel" role="dialog" aria-label="AI Chat">
        <header class="ai-chat__header">
            <span class="ai-chat__title">AI Chat</span>
            <button class="ai-chat__close" @onclick="ToggleChat" aria-label="Close">✖</button>
        </header>

        <div class="ai-chat__body">
            @if (Messages.Count == 0)
            {
                <p class="placeholder">No messages yet. Say hello 👋</p>
            }
            else
            {
                @foreach (var msg in Messages)
                {
                    <div class="msg @(msg.Role)">
                        <div class="msg-bubble">@msg.Content</div>
                    </div>
                }
            }
        </div>

        <footer class="ai-chat__footer">
            <input class="ai-chat__input"
                   placeholder="Type a message..."
                   @bind="Draft"
                   @bind:event="oninput"
                   @onkeydown="HandleKeyDown" />
            <button class="ai-chat__send" @onclick="Send">Send</button>
        </footer>
    </section>
}

@code {
    bool ShowChat = false;
    bool FirstOpen = true;
    record ChatMessage(string Role, string Content);

    List<ChatMessage> Messages = new();
    string Draft = string.Empty;

    private void ToggleChat()
    {
        ShowChat = !ShowChat;
        if (ShowChat && FirstOpen)
        {
            Messages.Add(new ChatMessage("assistant", "Hello 👋 I’m your AI assistant. How can I help today?"));
            FirstOpen = false;
        }
    }

    private async void Send()
    {
        var text = Draft?.Trim();
        if (string.IsNullOrEmpty(text))
        {
            return;
        }

        Messages.Add(new ChatMessage("user", text));
        Draft = string.Empty;

        var systemPrompt = await LoadSystemPromptAsync();

        JsonObject request = new JsonObject
        {
            ["model"] = "openai/gpt-oss-20b",
            ["messages"] = new JsonArray
        {
            new JsonObject
            {
                ["role"] = "system",
                ["content"] = systemPrompt
            },
            new JsonObject
            {
                ["role"] = "user",
                ["content"] = text
            }
        }
        };

        JsonObject result = await GroqAI.CreateChatCompletionAsync(request);
        var response = result?["choices"]?[0]?["message"]?["content"]?.ToString();

        Console.WriteLine(response);
        Messages.Add(new ChatMessage("assistant", response!));

        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            Send();
        }
    }

    private async Task<string> LoadSystemPromptAsync()
    {
        try
        {
            var file = Env.WebRootFileProvider.GetFileInfo("systemprompt.txt");
            if (file.Exists)
                return await File.ReadAllTextAsync(file.PhysicalPath);

            var p1 = Path.Combine(Env.WebRootPath ?? "", "systemprompt.txt");
            if (File.Exists(p1)) return await File.ReadAllTextAsync(p1);

            var p2 = Path.Combine(AppContext.BaseDirectory, "wwwroot", "systemprompt.txt");
            if (File.Exists(p2)) return await File.ReadAllTextAsync(p2);
        }
        catch {  }

        return "You are a helpful assistant for my Resume Project website.";
    }
}